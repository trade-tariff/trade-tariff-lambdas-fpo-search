#!/usr/bin/env bash

[[ "$TRACE" ]] && set -o xtrace
set -o errexit
set -o nounset
set -o pipefail
set -o noclobber

VERSION_FILE=".packer/ami-version.txt"
SPECIFIC_REGION=""
AMI_PREFIX="FPO Training"
DRY_RUN=true

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

show_usage() {
    cat << EOF
Usage: $0 [OPTIONS]

OPTIONS:
    --delete                Delete old AMIs and snapshots (default: dry run)
    --region REGION         Target specific region (default: all regions)
    --version-file FILE     Path to version file (default: .packer/ami-version.txt)
    --help                  Show this help message

EXAMPLES:
    $0                      # Dry run - show what would be deleted
    $0 --delete             # Actually delete old AMIs and snapshots
    $0 --region us-east-1   # Only check us-east-1 region
    $0 --delete --region us-west-2 --version-file /path/to/version.txt

EOF
}

while [[ $# -gt 0 ]]; do
    case $1 in
        --delete)
            DRY_RUN=false
            shift
            ;;
        --region)
            SPECIFIC_REGION="$2"
            shift 2
            ;;
        --version-file)
            VERSION_FILE="$2"
            shift 2
            ;;
        --help)
            show_usage
            exit 0
            ;;
        *)
            print_error "Unknown option: $1"
            show_usage
            exit 1
            ;;
    esac
done

check_aws_cli() {
    if ! command -v aws &> /dev/null; then
        print_error "AWS CLI is not installed or not in PATH"
        exit 1
    fi

    if ! aws sts get-caller-identity &> /dev/null; then
        print_error "AWS CLI is not configured or credentials are invalid"
        exit 1
    fi
}

get_current_version() {
    if [[ ! -f "$VERSION_FILE" ]]; then
        print_error "Version file not found: $VERSION_FILE"
        exit 1
    fi

    local version
    version=$(cat "$VERSION_FILE" | tr -d '\n\r' | xargs)
    if [[ -z "$version" ]]; then
        print_error "Version file is empty: $VERSION_FILE"
        exit 1
    fi

    echo "$version"
}

get_regions() {
    if [[ -n "$SPECIFIC_REGION" ]]; then
        echo "$SPECIFIC_REGION"
    else
        aws ec2 describe-regions --query 'Regions[].RegionName' --output text
    fi
}

get_amis_in_region() {
    local region=$1
    local current_version=$2

    aws ec2 describe-images \
        --region "$region" \
        --owners self \
        --filters "Name=name,Values=${AMI_PREFIX}*" \
        --query 'Images[].{ImageId:ImageId,Name:Name,CreationDate:CreationDate,SnapshotId:BlockDeviceMappings[0].Ebs.SnapshotId}' \
        --output json 2>/dev/null || echo "[]"
}

get_ami_snapshots() {
    local region=$1
    local ami_id=$2

    aws ec2 describe-images \
        --region "$region" \
        --image-ids "$ami_id" \
        --query 'Images[0].BlockDeviceMappings[].Ebs.SnapshotId' \
        --output text 2>/dev/null || echo ""
}

delete_ami_and_snapshots() {
    local region=$1
    local ami_id=$2
    local ami_name=$3

    print_info "Deleting AMI: $ami_id ($ami_name) in region: $region"

    # Get snapshots before deregistering AMI
    local snapshots
    snapshots=$(get_ami_snapshots "$region" "$ami_id")

    if [[ "$DRY_RUN" == "true" ]]; then
        print_warning "[DRY RUN] Would deregister AMI: $ami_id"
        if [[ -n "$snapshots" ]]; then
            for snapshot in $snapshots; do
                if [[ "$snapshot" != "None" && -n "$snapshot" ]]; then
                    print_warning "[DRY RUN] Would delete snapshot: $snapshot"
                fi
            done
        fi
        return
    fi

    # Deregister AMI
    if aws ec2 deregister-image --region "$region" --image-id "$ami_id" 2>/dev/null; then
        print_success "Deregistered AMI: $ami_id"

        # Delete associated snapshots
        if [[ -n "$snapshots" ]]; then
            for snapshot in $snapshots; do
                if [[ "$snapshot" != "None" && -n "$snapshot" ]]; then
                    if aws ec2 delete-snapshot --region "$region" --snapshot-id "$snapshot" 2>/dev/null; then
                        print_success "Deleted snapshot: $snapshot"
                    else
                        print_error "Failed to delete snapshot: $snapshot"
                    fi
                fi
            done
        fi
    else
        print_error "Failed to deregister AMI: $ami_id"
    fi
}

main() {
    print_info "Starting AMI cleanup..."

    check_aws_cli

    local current_version
    current_version=$(get_current_version)
    local current_ami_name="${AMI_PREFIX} ${current_version}"

    print_info "Current AMI version: $current_version"
    print_info "Current AMI name pattern: $current_ami_name"

    if [[ "$DRY_RUN" == "true" ]]; then
        print_warning "Running in DRY RUN mode - no resources will be deleted"
        print_warning "Use --delete flag to actually delete resources"
    fi

    # Get regions to process
    local regions
    regions=$(get_regions)
    local total_amis_found=0
    local total_amis_to_delete=0

    # Process each region
    for region in $regions; do
        print_info "Processing region: $region"

        # Get AMIs in this region
        local amis_json
        amis_json=$(get_amis_in_region "$region" "$current_version")
        local ami_count
        ami_count=$(echo "$amis_json" | jq length)

        if [[ "$ami_count" -eq 0 ]]; then
            print_info "No AMIs found in region: $region"
            continue
        fi

        total_amis_found=$((total_amis_found + ami_count))
        print_info "Found $ami_count AMIs in region: $region"

        # Process each AMI
        echo "$amis_json" | jq -c '.[]' | while read -r ami; do
            local ami_id
            ami_id=$(echo "$ami" | jq -r '.ImageId')
            local ami_name
            ami_name=$(echo "$ami" | jq -r '.Name')
            local creation_date
            creation_date=$(echo "$ami" | jq -r '.CreationDate')

            # Check if this AMI should be kept (matches current version)
            if [[ "$ami_name" == "$current_ami_name" ]]; then
                print_info "Keeping current AMI: $ami_id ($ami_name) - $creation_date"
            else
                print_warning "Found old AMI: $ami_id ($ami_name) - $creation_date"
                total_amis_to_delete=$((total_amis_to_delete + 1))

                # Delete or show what would be deleted
                delete_ami_and_snapshots "$region" "$ami_id" "$ami_name"
            fi
        done
    done

    # Summary
    echo
    print_info "=== SUMMARY ==="
    print_info "Total AMIs found: $total_amis_found"
    print_info "Current version AMIs: $((total_amis_found - total_amis_to_delete))"

    if [[ "$DRY_RUN" == "true" ]]; then
        print_warning "AMIs that would be deleted: $total_amis_to_delete"
        if [[ "$total_amis_to_delete" -gt 0 ]]; then
            print_warning "Run with --delete flag to actually delete these resources"
        fi
    else
        print_success "AMIs processed for deletion: $total_amis_to_delete"
    fi
}

main "$@"
