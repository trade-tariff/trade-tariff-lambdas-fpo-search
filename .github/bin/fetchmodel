#!/usr/bin/env bash

[[ "$TRACE" ]] && set -o xtrace
set -o errexit
set -o nounset
set -o pipefail
set -o noclobber

ENVIRONMENT=${1:?Environment not provided}
MODEL_KEY=$(.github/bin/getmodel)
VERSION_PREFIX=$(echo "$MODEL_KEY" | awk -F/ '{print $1}')
MODEL_BUCKET_NAME=trade-tariff-models-382373577178

source .github/bin/isautomatedbuild

if [ "$MODEL_KEY" = "" ]; then
  echo "No model for current version found"
  exit 1
fi

validate_model() {
  echo "Validating $MODEL_KEY"

  aws s3 cp --quiet "s3://$MODEL_BUCKET_NAME/$VERSION_PREFIX/passed" . || {
    echo "Model $MODEL_KEY has not passed validation"
    aws s3 cp --quiet "s3://$MODEL_BUCKET_NAME/$VERSION_PREFIX/failed" . && {
      echo "Model $MODEL_KEY is marked as failed"

      if is_automated_build; then
        echo "Automated build, closing PR"

        .github/bin/closepr
      fi
      exit 1
    }
    exit 1
  }
}

fetch_model() {
  echo "Fetching $ENVIRONMENT model"
  aws s3 cp "s3://$MODEL_BUCKET_NAME/$MODEL_KEY" .
  aws s3 cp "s3://$MODEL_BUCKET_NAME/$VERSION_PREFIX"/search-config.toml .
  unzip model.zip
}

mark_environment() {
  echo "Checking if $ENVIRONMENT is marked for $MODEL_KEY"
  marked_already=$(aws s3 ls "s3://$MODEL_BUCKET_NAME/$VERSION_PREFIX/$ENVIRONMENT" || true)

  if [ "$marked_already" != "" ]; then
    echo "Marked already"
  else
    echo "Marking first $ENVIRONMENT deployment for prefix $VERSION_PREFIX"
    echo -n "" | aws s3 cp - "s3://$MODEL_BUCKET_NAME/$VERSION_PREFIX/$ENVIRONMENT"
  fi
}

store_version() {
  echo "Storing version $VERSION_PREFIX"
  rm -f MODEL_VERSION
  echo "$VERSION_PREFIX" >MODEL_VERSION
}

validate_model
fetch_model
mark_environment
store_version
