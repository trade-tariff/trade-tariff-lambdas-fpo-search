#!/usr/bin/env bash

[[ "$TRACE" ]] && set -o xtrace
set -o errexit
set -o nounset
set -o pipefail
set -o noclobber

VERSION_PREFIX=$(.github/bin/getmodel | sed 's/\/model.zip//')
MODEL_BUCKET_NAME=trade-tariff-models-382373577178

function check_validation() {
  if aws s3 ls "s3://$MODEL_BUCKET_NAME/$VERSION_PREFIX/passed" 2>&1 | grep -q 'passed'; then
    echo "Model ${VERSION_PREFIX} has already passed validation"
    exit 0
  fi

  if aws s3 ls "s3://$MODEL_BUCKET_NAME/$VERSION_PREFIX/failed" 2>&1 | grep -q 'failed'; then
    echo "Model ${VERSION_PREFIX} has already failed validation"
    exit 1
  fi
}

function notify_slack() {
  local status=$1
  local color=${3:-good}
  local channel=${4:-#deployments}
  local emoji=${5:-":robot_face:"}
  local username=${6:-"Model Validation Bot"}

  blocks=$(jq -n \
    --arg status "$status" \
    --arg summary "$summary" \
    --arg thresholds_section "$thresholds_section" \
    --arg changes_section "$changes_section" \
    --arg full_details "Full details: s3://$MODEL_BUCKET_NAME/$VERSION_PREFIX/check_result.json" \
    '[
      {
        type: "header",
        text: {
          type: "plain_text",
          text: $status,
          emoji: true
        }
      },
      {
        type: "section",
        text: {
          type: "mrkdwn",
          text: $summary
        }
      },
      {
        type: "divider"
      },
      {
        type: "section",
        text: {
          type: "mrkdwn",
          text: $thresholds_section
        }
      },
      {
        type: "divider"
      },
      {
        type: "section",
        text: {
          type: "mrkdwn",
          text: $changes_section
        }
      },
      {
        type: "context",
        elements: [
          {
            type: "mrkdwn",
            text: $full_details
          }
        ]
      }
    ]'
  )

  payload=$(
    jq -n \
      --arg channel "$channel" \
      --arg username "$username" \
      --arg emoji "$emoji" \
      --argjson blocks "$blocks" \
      '{
        channel: $channel,
        username: $username,
        icon_emoji: $emoji,
        blocks: $blocks
      }'
  )
  echo "$payload"

  curl -X POST --data-urlencode "payload=$payload" "$SLACK_WEBHOOK_URL"
}

function mark_model() {
  result=$1
  echo -n "" | aws s3 cp - "s3://$MODEL_BUCKET_NAME/$VERSION_PREFIX/$result"
}

function mark_model_failed() {
  mark_model "failed"
}

function mark_model_passed() {
  mark_model "passed"
}

function handle_result() {
  aws s3 cp check_result.json "s3://$MODEL_BUCKET_NAME/$VERSION_PREFIX/check_result.json"
  any_highs=$(jq '.high | length > 0' < check_result.json)
  any_mediums=$(jq '.medium | length > 0' < check_result.json)

  old_model=$(jq -r '.old_model' < check_result.json)
  new_model=$(jq -r '.new_model' < check_result.json)

  if [[ "$any_highs" == true ]]; then
    status_emoji="❌"
    status="High threshold breaches detected - Model FAILED"
    color="danger"
    mark_model_failed
  elif [[ "$any_mediums" == true ]]; then
    status_emoji="⚠️"
    status="Medium threshold breaches detected - Model PASSED with warnings"
    color="warning"
    mark_model_passed
  else
    status_emoji="✅"
    status="No threshold breaches - Model PASSED"
    color="good"
    mark_model_passed
  fi

  summary=$'*Overall Summary*:\n- Old Model: '"$old_model"$'\n- New Model: '"$new_model"$'\n- High Breaches: '"$(jq '.high | length' < check_result.json)"$'\n- Medium Breaches: '"$(jq '.medium | length' < check_result.json)"$'\n- Low Changes: '"$(jq '.low | length' < check_result.json)"$'\n'

  thresholds_section=$'\n*Threshold Details*:\n'
  while IFS= read -r thresh; do
    presented_name=$(echo "$thresh" | jq -r '.presented_name // .name')
    delta=$(echo "$thresh" | jq -r '.delta' | awk '{printf "%.2f", $1}')
    old=$(echo "$thresh" | jq -r '.old' | awk '{printf "%.2f", $1}')
    new=$(echo "$thresh" | jq -r '.new' | awk '{printf "%.2f", $1}')

    thresholds_section+=$'- *'"$presented_name"'*: Change '"$delta"' (Old: '"$old"', New: '"$new"')'$'\n'
    # thresholds_section+=$'- *'"$presented_name"'*: Change '"$delta"' (Old: '"$old"', New: '"$new"') \n'
  done < <(jq -c '.thresholds[]' < check_result.json)

  changes_section=$'\n*Changes Summary*:\n'
  while IFS= read -r key; do
    unavailable=$(jq -r ".changes[\"$key\"].unavailable // empty" < check_result.json)
    if [[ -n "$unavailable" ]]; then
      changes_section+=$'- *'"$key"'*: Changes unavailable: '"$unavailable"''$'\n'
      continue
    fi

    added_count=$(jq ".changes[\"$key\"].added_count // 0" < check_result.json)
    removed_count=$(jq ".changes[\"$key\"].removed_count // 0" < check_result.json)

    changes_section+=$'- *'"$key"'*:'$' - Additions: '"$added_count"''$' - Removals: '"$removed_count"''$'\n'
  done < <(jq -r '.changes | keys[]' < check_result.json)

  # If no changes keys at all, note why
  if ! jq -e '.changes | keys | length > 0' < check_result.json > /dev/null; then
    changes_section+=$'No changes detected (check logs for details).\n'
  fi

  notify_slack "$status_emoji $status" "" "$color"
}

check_validation
.github/bin/fetchbenchmarks --force
.github/bin/checkbenchmarks
handle_result
