#!/usr/bin/env bash

[[ "$TRACE" ]] && set -o xtrace
set -o errexit
set -o nounset
set -o pipefail
set -o noclobber

VERSION_PREFIX=$(.github/bin/getmodel | sed 's/\/model.zip//')
MODEL_BUCKET_NAME=trade-tariff-models-382373577178

function check_validation() {
  if aws s3 ls "s3://$MODEL_BUCKET_NAME/$VERSION_PREFIX/passed" 2>&1 | grep -q 'passed'; then
    echo "Model ${VERSION_PREFIX} has already passed validation"
    exit 0
  fi

  if aws s3 ls "s3://$MODEL_BUCKET_NAME/$VERSION_PREFIX/failed" 2>&1 | grep -q 'failed'; then
    echo "Model ${VERSION_PREFIX} has already failed validation"
    exit 1
  fi
}

function notify_slack() {
  local status=$1
  local message=$2
  local color=${3:-good}
  local channel=${4:-#deployments}
  local emoji=${5:-":robot_face:"}
  local username=${6:-"Model Validation Bot"}

  payload=$(
    jq -n \
      --arg channel "$channel" \
      --arg text "$status" \
      --arg color "$color" \
      --arg message "$message" \
      --arg username "$username" \
      --arg emoji "$emoji" \
      '{
        channel: $channel,
        username: $username,
        text: $text,
        icon_emoji: $emoji,
        attachments: [
          {
            color: $color,
            text: $message
          }
        ]
      }'
  )
  echo "$payload"

  curl -X POST --data-urlencode "payload=$payload" "$SLACK_WEBHOOK_URL"
}

function mark_model() {
  result=$1
  echo -n "" | aws s3 cp - "s3://$MODEL_BUCKET_NAME/$VERSION_PREFIX/$result"
}

function mark_model_failed() {
  mark_model "failed"
}

function mark_model_passed() {
  mark_model "passed"
}

function handle_result() {
  aws s3 cp check_result.json "s3://$MODEL_BUCKET_NAME/$VERSION_PREFIX/check_result.json"
  any_highs=$(jq '.high | length > 0' < check_result.json)
  any_mediums=$(jq '.medium | length > 0' < check_result.json)

  old_model=$(jq -r '.old_model' < check_result.json)
  new_model=$(jq -r '.new_model' < check_result.json)

  if [[ "$any_highs" == true ]]; then
    status_emoji="❌"
    status="High threshold breaches detected - Model FAILED"
    color="danger"
    mark_model_failed
  elif [[ "$any_mediums" == true ]]; then
    status_emoji="⚠️"
    status="Medium threshold breaches detected - Model PASSED with warnings"
    color="warning"
    mark_model_passed
  else
    status_emoji="✅"
    status="No threshold breaches - Model PASSED"
    color="good"
    mark_model_passed
  fi

  summary="*Overall Summary*:\n- Old Model: $old_model\n- New Model: $new_model\n- High Breaches: $(jq '.high | length' < check_result.json)\n- Medium Breaches: $(jq '.medium | length' < check_result.json)\n- Low Changes: $(jq '.low | length' < check_result.json)\n"

  thresholds=$(jq -r '.thresholds[] | "*\(.name)*: Delta \(.delta) (\(.direction)) - Old: \(.old), New: \(.new)"' < check_result.json | paste -sd $'\n' -)
  thresholds_section="\n*Threshold Details*:\n$thresholds"

  changes_section="\n*Changes Summary*:\n"
  while IFS= read -r key; do
    unavailable=$(jq -r ".changes[\"$key\"].unavailable // empty" < check_result.json)
    if [[ -n "$unavailable" ]]; then
      changes_section+="- *$key*: Changes unavailable: $unavailable\n"
      continue
    fi

    added_count=$(jq ".changes[\"$key\"].added_count // 0" < check_result.json)
    removed_count=$(jq ".changes[\"$key\"].removed_count // 0" < check_result.json)

    if [[ "$key" == *"top 1"* ]]; then
      top_label="top-1"
    elif [[ "$key" == *"top 5"* ]] || [[ "$key" == *"in top 5"* ]]; then
      top_label="top-5"
    else
      top_label="top-N"
    fi

    changes_section+="- *$key*:\n  - Improvements: $added_count added to $top_label ✅\n  - Regressions: $removed_count removed from $top_label ❌\n"
  done < <(jq -r '.changes | keys[]' < check_result.json)

  if ! jq -e '.changes | keys | length > 0' < check_result.json > /dev/null; then
    changes_section+="No changes detected (check logs for details).\n"
  fi

  # Full message
  message="$summary$thresholds_section$changes_section\nFull details: s3://$MODEL_BUCKET_NAME/$VERSION_PREFIX/check_result.json"

  notify_slack "$status_emoji $status" "$message" "$color"
}

check_validation
.github/bin/fetchbenchmarks --force
.github/bin/checkbenchmarks
handle_result
