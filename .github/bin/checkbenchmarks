#!./venv/bin/python

import json
import os
from pathlib import Path

import toml

cwd = Path.cwd()

# Load the thresholds
with open(".github/benchmark-thresholds.toml") as f:
    thresholds = toml.load(f)["thresholds"]

# Load the results
old_results_dir = cwd / "old_benchmark"
new_results_dir = cwd / "new_benchmark"

old_version = old_results_dir / "version.txt"
new_version = new_results_dir / "version.txt"

with open(old_version) as f:
    old_version = f.read().strip()

with open(new_version) as f:
    new_version = f.read().strip()

results = {
    "old_model": old_version,
    "new_model": new_version,
    "high": [],
    "medium": [],
    "low": [],
    "thresholds": [],
    "changes": {},
}


def is_in_top_n(predictions, correct_code, n):
    if len(predictions) < n:
        n = len(predictions)
    for i in range(n):
        if predictions[i]["code"] == correct_code:
            return True
    return False


for threshold in thresholds:
    old = old_results_dir / threshold["file"]
    new = new_results_dir / threshold["file"]

    if not old.exists():
        print(f"File {os.path.relpath(old)} not found in old results")
        continue

    if not new.exists():
        print(f"File {os.path.relpath(new)} not found in new results")
        continue

    old_result = json.loads(open(old).read())
    new_result = json.loads(open(new).read())

    if old.name in threshold["file"] and new.name in threshold["file"]:
        if "interested_in" in threshold.keys():
            old_values = list(old_result.items())[threshold["interested_in"]][1]
            new_values = list(new_result.items())[threshold["interested_in"]][1]

            old_result_value = old_values[threshold["key"]]
            new_result_value = new_values[threshold["key"]]
        else:
            old_result_value = old_result[threshold["key"]]
            new_result_value = new_result[threshold["key"]]

        delta = new_result_value - old_result_value
        direction = threshold["direction"]
        results["thresholds"].append(
            {
                "name": threshold["name"],
                "old": old_result_value,
                "new": new_result_value,
                "delta": delta,
                "direction": direction,
            }
        )

        if direction == "increase_is_good":
            if delta < threshold["changeHigh"]:
                print(
                    f"Threshold {threshold['name']} failed: {delta} < {threshold['changeHigh']}"
                )
                results["high"].append(threshold["name"])
            elif delta < threshold["changeMedium"]:
                print(
                    f"Threshold {threshold['name']} warn: {delta} < {threshold['changeMedium']}"
                )
                results["medium"].append(threshold["name"])
            elif delta < threshold["changeLow"]:
                print(
                    f"Threshold {threshold['name']} passed with minor change: {delta} < {threshold['changeLow']}"
                )
                results["low"].append(threshold["name"])
            else:
                print(
                    f"Threshold {threshold['name']} passed: {delta} >= {threshold['changeLow']}"
                )
        else:
            if delta > threshold["changeHigh"]:
                print(
                    f"Threshold {threshold['name']} failed: {delta} > {threshold['changeHigh']}"
                )
                results["high"].append(threshold["name"])
            elif delta > threshold["changeMedium"]:
                print(
                    f"Threshold {threshold['name']} warn: {delta} > {threshold['changeMedium']}"
                )
                results["medium"].append(threshold["name"])
            elif delta > threshold["changeLow"]:
                print(
                    f"Threshold {threshold['name']} passed with minor change: {delta} > {threshold['changeLow']}"
                )
                results["low"].append(threshold["name"])
            else:
                print(
                    f"Threshold {threshold['name']} passed: {delta} <= {threshold['changeLow']}"
                )

        if (
            "benchmark_results_classified.json" in threshold["file"]
            or "benchmark_results_good_goods.json" in threshold["file"]
        ):
            benchmark_type = (
                "classified" if "classified" in threshold["file"] else "good_goods"
            )
            old_details_file = (
                old_results_dir / f"benchmark_details_{benchmark_type}.json"
            )
            new_details_file = (
                new_results_dir / f"benchmark_details_{benchmark_type}.json"
            )

            if old_details_file.exists() and new_details_file.exists():
                old_details = json.loads(open(old_details_file).read())
                new_details = json.loads(open(new_details_file).read())

                old_dict = {item["description"]: item for item in old_details}
                new_dict = {item["description"]: item for item in new_details}

                # Common descriptions
                common_descriptions = set(old_dict.keys()) & set(new_dict.keys())

                added = []
                removed = []

                if "top 1" in threshold["name"].lower():
                    n = 1
                elif "top 5" in threshold["name"].lower():
                    n = 5
                else:
                    continue  # Skip if not top1 or top5

                for desc in common_descriptions:
                    old_item = old_dict[desc]
                    new_item = new_dict[desc]
                    correct_code = old_item["correct_code"]  # Assume same

                    was_in_top = is_in_top_n(old_item["predictions"], correct_code, n)
                    now_in_top = is_in_top_n(new_item["predictions"], correct_code, n)

                    if not was_in_top and now_in_top:
                        added.append(
                            {
                                "description": desc,
                                "correct_code": correct_code,
                                "old_predictions": old_item["predictions"],
                                "new_predictions": new_item["predictions"],
                            }
                        )
                    elif was_in_top and not now_in_top:
                        removed.append(
                            {
                                "description": desc,
                                "correct_code": correct_code,
                                "old_predictions": old_item["predictions"],
                                "new_predictions": new_item["predictions"],
                            }
                        )

                change_key = f"{threshold['name']}_changes"
                results["changes"][change_key] = {
                    "added": added,
                    "removed": removed,
                    "added_count": len(added),
                    "removed_count": len(removed),
                }

                # Optionally write changes to file
                changes_file = cwd / f"changes_{benchmark_type}_{n}.json"
                with open(changes_file, "w") as f:
                    json.dump(results["changes"][change_key], f, indent=4)
                print(f"Wrote changes for {threshold['name']} to {changes_file}")

    else:
        print("No match")

print(f"Results: {json.dumps(results, indent=4)}")

with open("check_result.json", "w") as f:
    f.write(json.dumps(results, indent=4))
