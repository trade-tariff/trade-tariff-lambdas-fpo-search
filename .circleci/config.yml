version: 2.1

filter-not-main: &filter-not-main
  filters:
    branches:
      ignore:
        - main
        - /^dependabot/(?!docker/).*/
        - /^hotfix\/.+/

filter-main: &filter-main
  filters:
    branches:
      only:
        - main
        - /^hotfix\/.+/

filter-release: &filter-release
  filters:
    tags:
      only: /^release-202[\d-]+/
    branches:
      ignore: /.*/

orbs:
  aws-cli: circleci/aws-cli@4.1.1
  serverless-framework: circleci/serverless-framework@2.0.1
  slack: circleci/slack@4.3.0
  tariff: trade-tariff/trade-tariff-ci-orb@0

executors:
  base:
    docker:
      - image: cimg/base:stable
    resource_class: small
  python:
    docker:
      - image: cimg/python:3.11.2
    resource_class: small
  node:
    docker:
      - image: cimg/node:21.2.0
    resource_class: small
  node-browsers:
    docker:
      - image: cimg/node:21.2.0-browsers

jobs:
  fetch-model:
    executor: base
    parameters:
      environment:
        type: string
    steps:
      - checkout
      - aws-cli/install
      - run:
          name: "Fetch Model"
          command: .circleci/bin/fetchmodel << parameters.environment >>
      - persist_to_workspace:
          root: .
          paths:
            - target/
            - search-config.toml
            - MODEL_VERSION

  build:
    executor: python
    parameters:
      environment:
        type: string
    steps:
      - checkout
      - setup_remote_docker
      - aws-cli/install
      - attach_workspace:
          at: .
      - run:
          name: "Build and Push to ECR"
          command: |
            python -m venv venv
            source venv/bin/activate
            pip install requests==2.32.0
            .circleci/bin/download_search_references
            .circleci/bin/ecr "/<< parameters.environment >>/FPO_SEARCH_ECR_URL"

  check:
    executor: python
    steps:
      - checkout
      - run: |
          python -m venv venv
          source venv/bin/activate
          pip install ruff==0.1.6
          ruff check .

  test:
    executor: python
    steps:
      - checkout
      - run: |
          python -m venv venv
          source venv/bin/activate
          pip install --no-cache-dir --upgrade torch --index-url https://download.pytorch.org/whl/cpu
          pip install --no-cache-dir  lingua-language-detector dill
          pip install --no-cache-dir --upgrade -r requirements_lambda.txt
          # TODO: Add a separate requirements/test.txt
          python -m unittest -v -b

  deploy:
    executor: node
    parameters:
      stage:
        type: string
    steps:
      - checkout
      - serverless-framework/setup
      - aws-cli/install
      - run: |
          npm install serverless-domain-manager
      - run: |
          export DOCKER_TAG=$(git rev-parse --short HEAD)
          export SENTRY_DSN=$(.circleci/bin/getsecret fpo-search-sentry-dsn)

          make deploy-<< parameters.stage  >>
      - slack/notify:
          channel: deployments
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: deployments
          event: pass
          template: basic_success_1

  smoketest:
    executor: base
    parameters:
      endpoint:
        type: string
    steps:
      - checkout
      - run: .circleci/bin/smoketest << parameters.endpoint >> $API_KEY

  e2etest:
    executor: node-browsers
    parameters:
      environment:
        type: string
    steps:
      - run:
          name: run
          command: |
            git clone --depth=1 https://github.com/trade-tariff/trade-tariff-fpo-dev-hub-e2e
            cd trade-tariff-fpo-dev-hub-e2e

            yarn install
            yarn playwright install --with-deps chromium
            yarn run test-<<parameters.environment>>

  perftest:
    executor: node
    parameters:
      endpoint:
        type: string
    steps:
      - checkout
      - run: .circleci/bin/perf << parameters.endpoint >> $API_KEY

  build-ami:
    executor: base
    steps:
      - checkout
      - setup_remote_docker
      - aws-cli/install
      - run:
          name: "Build AMI"
          command: .circleci/bin/buildami
          no_output_timeout: 30m

  automated-build-model:
    executor: base
    steps:
      - checkout
      - run: ".circleci/bin/ghinstall"
      - run: ".circleci/bin/createpr"

  build-model:
    executor: base
    steps:
      - checkout
      - aws-cli/install
      - run:
          name: "Build Model"
          command: .circleci/bin/buildmodel
          no_output_timeout: 1h

  validate-model:
    executor: python
    steps:
      - checkout
      - aws-cli/install
      - run: |
          python -m venv venv
          source venv/bin/activate
          pip install toml
      - run: .circleci/bin/validatemodel

  clear-model-instances:
    executor: base
    steps:
      - checkout
      - aws-cli/install
      - run:
          name: "Clear Lingering Model Instances"
          command: .circleci/bin/clearinstances

  merge-automated-model-pr:
    executor: base
    steps:
      - checkout
      - run: ".circleci/bin/ghinstall"
      - run: ".circleci/bin/mergepr"

workflows:
  version: 2

  deploy-to-development:
    jobs:
      - check:
          <<: *filter-not-main

      - test:
          requires:
            - check
          <<: *filter-not-main

      - build-ami:
          name: build-ami-development
          context: trade-tariff-terraform-aws-development
          <<: *filter-not-main

      - build-model:
          name: build-model-development
          context: trade-tariff-fpo-models-development
          requires:
            - build-ami-development
          <<: *filter-not-main

      - validate-model:
          name: validate-model-development
          context: trade-tariff-fpo-models-development
          requires:
            - build-model-development
          <<: *filter-not-main

      - fetch-model:
          name: fetch-model-development
          environment: development
          context: trade-tariff-fpo-models-development
          requires:
            - validate-model-development
          <<: *filter-not-main

      - build:
          name: build-development
          context: trade-tariff-terraform-aws-development
          environment: development
          requires:
            - fetch-model-development
          <<: *filter-not-main

      - deploy:
          name: deploy-development
          stage: development
          context: trade-tariff-lambda-deployments-development
          requires:
            - test
            - build-development
          <<: *filter-not-main

      - perftest:
          name: perftest-development
          context: trade-tariff-fpo-smoketests-development
          endpoint: https://search.dev.trade-tariff.service.gov.uk
          requires:
            - deploy-development
          <<: *filter-not-main

      - e2etest:
          name: e2etest-development
          context: trade-tariff-fpo-integration-development
          environment: development
          requires:
            - deploy-development
          <<: *filter-not-main

      - smoketest:
          name: smoketest-development
          context: trade-tariff-fpo-smoketests-development
          endpoint: https://search.dev.trade-tariff.service.gov.uk
          requires:
            - deploy-development
          <<: *filter-not-main

      - merge-automated-model-pr:
          name: merge-automated-model-pr
          context: trade-tariff-fpo-models-development
          requires:
            - smoketest-development
            - e2etest-development
            - perftest-development
          <<: *filter-not-main

  deploy-to-staging-and-production:
    jobs:
      - fetch-model:
          name: fetch-model-staging
          environment: staging
          context: trade-tariff-fpo-models-staging
          <<: *filter-main

      - build:
          name: build-staging
          context: trade-tariff-terraform-aws-staging
          environment: staging
          requires:
            - fetch-model-staging
          <<: *filter-main

      - deploy:
          name: deploy-staging
          stage: staging
          context: trade-tariff-lambda-deployments-staging
          <<: *filter-main
          requires:
            - build-staging

      - perftest:
          name: perftest-staging
          context: trade-tariff-fpo-smoketests-staging
          endpoint: https://search.staging.trade-tariff.service.gov.uk
          requires:
            - deploy-staging
          <<: *filter-main

      - e2etest:
          name: e2etest-staging
          context: trade-tariff-fpo-integration-staging
          environment: staging
          requires:
            - deploy-staging
          <<: *filter-main

      - smoketest:
          name: smoketest-staging
          context: trade-tariff-fpo-smoketests-staging
          endpoint: https://search.staging.trade-tariff.service.gov.uk
          requires:
            - deploy-staging
          <<: *filter-main

      - tariff/create-production-release:
          name: create-production-release
          context: trade-tariff-releases
          image-name: tariff-fpo-search-production
          requires:
            - e2etest-staging
            - smoketest-staging
            - perftest-staging
          <<: *filter-main

      - fetch-model:
          name: fetch-model-production
          environment: production
          context: trade-tariff-fpo-models-production
          <<: *filter-release

      - deploy:
          name: deploy-production
          stage: production
          context: trade-tariff-lambda-deployments-production
          requires:
            - fetch-model-production
          <<: *filter-release

  nightly-clear-model-instances:
    triggers:
      - schedule:
          cron: "0 0 * * *"    # Every day at midnight UTC
          <<: *filter-main
    jobs:
      - clear-model-instances:
          context: trade-tariff-fpo-models-development

  bi-weekly-automated-model-build:
    # triggers:
    #   - schedule:
    #       cron: "0 0 1,15 * *"    # 1st and 15th of every month at midnight UTC
    #       <<: *filter-main
    jobs:
      - automated-build-model:
          context: trade-tariff-fpo-models-development
