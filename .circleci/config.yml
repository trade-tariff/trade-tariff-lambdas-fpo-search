version: 2.1

filter-not-main: &filter-not-main
  filters:
    branches:
      ignore:
        - main
        - /^dependabot/(?!docker/).*/
        - /^hotfix\/.+/

filter-main: &filter-main
  filters:
    branches:
      only:
        - main
        - /^hotfix\/.+/

filter-release: &filter-release
  filters:
    tags:
      only: /^release-202[\d-]+/
    branches:
      ignore: /.*/

orbs:
  serverless-framework: circleci/serverless-framework@2.0.1
  slack: circleci/slack@4.3.0
  tariff: trade-tariff/trade-tariff-ci-orb@0
  aws-cli: circleci/aws-cli@4.1.1

executors:
  base:
    docker:
      - image: cimg/base:stable
    resource_class: small
  python:
    docker:
      - image: cimg/python:3.11.2
    resource_class: small
  node:
    docker:
      - image: cimg/node:21.2.0
    resource_class: small

parameters:
  train_model:
    description: if true, will start the training instance
    type: boolean
    default: false

jobs:
  build:
    executor: base
    parameters:
      environment:
        type: string
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.11
          docker_layer_caching: false
      - aws-cli/install
      - run:
          name: "Build and Push to ECR"
          command: ./.circleci/ecr.sh "/<< parameters.environment >>/FPO_SEARCH_ECR_URL"

  check:
    executor: python
    steps:
      - checkout
      - run: |
          python -m venv venv
          source venv/bin/activate
          pip install ruff==0.1.6
          ruff check .

  test:
    executor: python
    steps:
      - checkout
      - run: |
          python -m venv venv
          source venv/bin/activate
          pip install --no-cache-dir --upgrade torch --index-url https://download.pytorch.org/whl/cpu
          pip install --no-cache-dir --upgrade -r requirements_lambda.txt
          # TODO: Add a separate requirements/test.txt
          python -m unittest -v -b

  deploy:
    executor: node
    parameters:
      stage:
        type: string
    steps:
      - checkout
      - serverless-framework/setup
      - aws-cli/install
      - run: |
          npm install serverless-domain-manager
      - run: |
          export DOCKER_TAG=$(git rev-parse --short HEAD)
          export SENTRY_DSN=$(.circleci/bin/getsecret fpo-search-sentry-dsn)

          make deploy-<< parameters.stage  >>
      - slack/notify:
          channel: deployments
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: deployments
          event: pass
          template: basic_success_1

  smoketest:
    executor: base
    parameters:
      endpoint:
        type: string
    steps:
      - checkout
      - run: .circleci/bin/smoketest << parameters.endpoint >> $API_KEY

  perftest:
    executor: node
    parameters:
      endpoint:
        type: string
    steps:
      - checkout
      - run: .circleci/bin/perf << parameters.endpoint >> $API_KEY

  start-training-instance:
    executor: base
    steps:
      - checkout
      - aws-cli/install
      - run: .circleci/ec2.sh

workflows:
  version: 2

  deploy-to-development:
    when:
      equal: [ false, << pipeline.parameters.train_model >>]

    jobs:
      - check:
          <<: *filter-not-main

      - test:
          requires:
            - check
          <<: *filter-not-main

      - build:
          name: build-development
          context: trade-tariff-terraform-aws-development
          environment: development
          <<: *filter-not-main

      - deploy:
          name: deploy-development
          stage: development
          context: trade-tariff-lambda-deployments-development
          requires:
            - test
            - build-development
          <<: *filter-not-main

      - perftest:
          name: perftest-development
          context: trade-tariff-fpo-smoketests-development
          endpoint: https://search.dev.trade-tariff.service.gov.uk
          requires:
            - deploy-development
          <<: *filter-not-main

      - smoketest:
          name: smoketest-development
          context: trade-tariff-fpo-smoketests-development
          endpoint: https://search.dev.trade-tariff.service.gov.uk
          requires:
            - deploy-development
          <<: *filter-not-main

  deploy-to-staging:
    jobs:
      - build:
          name: build-staging
          context: trade-tariff-terraform-aws-staging
          environment: staging
          <<: *filter-main

      - deploy:
          name: deploy-staging
          stage: staging
          context: trade-tariff-lambda-deployments-staging
          <<: *filter-main
          requires:
            - build-staging

      - perftest:
          name: perftest-staging
          context: trade-tariff-fpo-smoketests-staging
          endpoint: https://search.staging.trade-tariff.service.gov.uk
          requires:
            - deploy-staging
          <<: *filter-main

      - smoketest:
          name: smoketest-staging
          context: trade-tariff-fpo-smoketests-staging
          endpoint: https://search.staging.trade-tariff.service.gov.uk
          requires:
            - deploy-staging
          <<: *filter-main

  deploy-to-production:
    jobs:
      - promote-to-production?:
          type: approval
          <<: *filter-main

      - tariff/create-production-release:
          context: trade-tariff-releases
          image-name: tariff-fpo-search-production
          requires:
            - promote-to-production?
          <<: *filter-main

      - deploy:
          name: deploy-production
          stage: production
          context: trade-tariff-lambda-deployments-production
          <<: *filter-release

      - perftest:
          name: perftest-production
          context: trade-tariff-fpo-smoketests-production
          endpoint: https://search.trade-tariff.service.gov.uk
          requires:
            - deploy-production
          <<: *filter-release

      - smoketest:
          name: smoketest-production
          context: trade-tariff-fpo-smoketests-production
          endpoint: https://search.trade-tariff.service.gov.uk
          requires:
            - deploy-production
          <<: *filter-release

  start-training:
    when:
      equal: [ true, << pipeline.parameters.train_model >>]

    jobs:
      - start-training-instance:
          context: trade-tariff-terraform-aws-production
