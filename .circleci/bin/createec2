#!/usr/bin/env bash

# set -o xtrace
set -o errexit
set -o nounset
set -o pipefail
set -o noclobber

fetch_account_id ()
{
  aws sts get-caller-identity --query Account --output text
}

fetch_latest_ami_image_id_by_name ()
{
  image_name_query=$1
  region='us-east-1'
  owner=$(fetch_account_id)

  aws ec2 describe-images \
    --region "$region" \
    --owners "$owner" \
    --filters "Name=name,Values=${image_name_query}" 'Name=state,Values=available' \
    --query 'reverse(sort_by(Images, &CreationDate))[:1].ImageId' \
    --output text
}

fetch_subnet_by_cidr ()
{
  region='us-east-1'

  aws ec2 describe-subnets --filters "Name=cidrBlock,Values=$1" --region "$region" --query 'Subnets[0].SubnetId' --output text
}

fetch_security_group_by_name ()
{
  region='us-east-1'

  aws ec2 describe-security-groups --filters "Name=group-name,Values=$1" --region "$region" --query 'SecurityGroups[0].GroupId' --output text
}

launch_ec2_instance ()
{
  aws ec2 run-instances \
    --image-id "$LATEST_AMI" \
    --subnet-id "$SUBNET_ID" \
    --security-group-ids "$SECURITY_GROUP_IDS" \
    --instance-type trn1.2xlarge \
    --key-name "$KEY_PAIR_NAME" \
    --block-device-mappings '[{"DeviceName":"/dev/xvda","Ebs":{"VolumeSize":100,"DeleteOnTermination":true}}]' \
    --associate-public-ip-address \
    --region 'us-east-1' \
    --output text \
    --query 'Instances[0].InstanceId'
}

wait_for_instance_to_be_available ()
{
  aws ec2 wait instance-running --instance-ids "$1"
}

fetch_ec2_instance_public_ip ()
{
  aws ec2 describe-instances --instance-ids "$1" --query 'Reservations[0].Instances[0].PublicIpAddress' --output text
}

store_ec2_private_key ()
{
  secret_id="fpo-search-training-pem"
  region='eu-west-2'

  aws secretsmanager get-secret-value \
    --secret-id "$secret_id" \
    --region "$region" \
    --query 'SecretString' \
    --output text > ~/.ssh/fpo-search-training.pem

  chmod 400 ~/.ssh/fpo-search-training.pem
}

validate_connection ()
{
  ssh -i ~/.ssh/"$KEY_PAIR_NAME".pem -o StrictHostKeyChecking=no ec2-user@"$1" "echo 'Connection successful!'"
}

run_training_script_on_ec2_instance ()
{
  ssh -i ~/.ssh/"$KEY_PAIR_NAME".pem -o StrictHostKeyChecking=no ec2-user@"$1" "bash cd trade-tariff-lambdas-fpo-search && train.py --config-file search-config.toml"
}

copy_model_from_ec2_instance ()
{
  scp -i ~/.ssh/"$KEY_PAIR_NAME".pem -o StrictHostKeyChecking=no ec2-user@"$1":~/trade-tariff-lambdas-fpo-search/model.tar.gz "$2"
}

copy_model_to_s3 ()
{
  aws s3 cp "$1" s3://"$MODEL_BUCKET_NAME/$2"
}

terminate_ec2_instance ()
{
  aws ec2 terminate-instances --instance-ids "$1" --region 'us-east-1'
}

LATEST_AMI=$(fetch_latest_ami_image_id_by_name "Deep Learning AMI Neuron PyTorch*")
SUBNET_ID=$(fetch_subnet_by_cidr "10.0.104.0/24")
SECURITY_GROUP_IDS=$(fetch_security_group_by_name "allow-ssh")
KEY_PAIR_NAME=fpo-training-instance
MODEL_BUCKET_NAME=trade-tariff-models-382373577178

echo "Launching EC2 instance with configuration..."
echo "   üìÄ AMI: $LATEST_AMI"
echo "   üìû Subnet ID: $SUBNET_ID"
echo "   üîì Security Group IDs: $SECURITY_GROUP_IDS"
echo "   üîì Key Pair Name: $KEY_PAIR_NAME"
echo "   üíø Model Bucket Name: $MODEL_BUCKET_NAME"
echo "   üíª Account ID: $(fetch_account_id)"

INSTANCE_ID=$(launch_ec2_instance)

echo "Instance ID: $INSTANCE_ID"
echo
echo "Waiting for instance to be available..."
echo
echo "This may take a few minutes..."
echo "‚è≥"

wait_for_instance_to_be_available "$INSTANCE_ID"

echo "Instance is now available!"
echo
echo "Fetching public IP address..."
PUBLIC_IP=$(fetch_ec2_instance_public_ip "$INSTANCE_ID")
echo "   üìû Public IP: $PUBLIC_IP"
echo

echo "Retrieving private key..."
store_ec2_private_key "fpo-search-training-pem"

echo "Validating connection..."
validate_connection "$PUBLIC_IP"
echo "Connection successful!"

echo "Running training script on EC2 instance..."
# run_training_script_on_ec2_instance "$PUBLIC_IP"

echo "Copying model from EC2 instance..."
# copy_model_from_ec2_instance "$PUBLIC_IP" "model.tar.gz"

echo "Copying model to S3..."
# copy_model_to_s3 "model.tar.gz" "model.tar.gz"

echo "Terminating EC2 instance..."
terminate_ec2_instance "$INSTANCE_ID"
