#!/usr/bin/env bash

[[ "$TRACE" ]] && set -o xtrace
set -o errexit
set -o nounset
set -o pipefail
set -o noclobber

sleep 50

URL=$1
API_KEY=$2

# Ensure it responds with a 200 to a POST request
STATUS_CODE=$(curl -X POST -d '{"description":"grilled cheese"}' -s -o /dev/null -w "%{http_code}" "${URL}/fpo-code-search" \
  -H "X-Api-Key: $API_KEY")

if [[ "$STATUS_CODE" -ne 200 ]] ; then
  echo "ERROR: Status code of $STATUS_CODE" >&2
  exit 1
fi

function has_correct_code() {
  description=$1
  expected_code=$2

  curl --silent -X POST $URL/fpo-code-search \
    -H 'Content-Type: application/json' \
    -H "X-Api-Key: $API_KEY" \
    -d "{\"description\":\"$description\"}" | \
    jq ".results | .[] | select(.code == \"$expected_code\") | any"
}

function has_no_results() {
  description=$1

  curl --silent -X POST $URL/fpo-code-search \
    -H 'Content-Type: application/json' \
    -H "X-Api-Key: $API_KEY" \
    -d "{\"description\":\"$description\"}" | \
    jq ".results | length == 0"
}

# Ensure it handles search references
HAS_CORRECT_CODE=$(has_correct_code "ricotta" "040610")

if [[ "$HAS_CORRECT_CODE" != "true" ]] ; then
  echo "ERROR: Expected search reference code not found" >&2
  exit 1
fi

# Ensure it handles vague terms
HAS_NO_RESULTS=$(has_no_results "bits")

if [[ "$HAS_NO_RESULTS" != "true" ]] ; then
  echo "ERROR: Expected no results for vague term" >&2
  exit 1
fi

# Ensure it responds to a healthcheck
STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" "${URL}/healthcheck")

if [[ "$STATUS_CODE" -ne 200 ]] ; then
  echo "ERROR: Status code of $STATUS_CODE" >&2
  exit 1
fi

# Ensure it responds with a 403 if credentials are missing
STATUS_CODE=$(curl -X POST -d '{"description":"grilled cheese"}' -s -o /dev/null -w "%{http_code}" "${URL}/fpo-code-search")

if [[ "$STATUS_CODE" -ne 403 ]] ; then
  echo "ERROR: Status code of $STATUS_CODE" >&2
  exit 1
fi

echo "All tests passed"
